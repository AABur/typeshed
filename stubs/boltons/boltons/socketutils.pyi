import socket
from _typeshed import Incomplete

# class RLock:
#     def __enter__(self) -> None: ...
#     def __exit__(self, exctype, excinst, exctb) -> None: ...

DEFAULT_TIMEOUT: int
DEFAULT_MAXSIZE: Incomplete

class BufferedSocket:
    sock: Incomplete
    rbuf: bytes
    sbuf: Incomplete
    maxsize: Incomplete
    timeout: Incomplete
    def __init__(self, sock, timeout=..., maxsize=..., recvsize=...) -> None: ...
    def settimeout(self, timeout) -> None: ...
    def gettimeout(self): ...
    def setblocking(self, blocking) -> None: ...
    def setmaxsize(self, maxsize) -> None: ...
    def getrecvbuffer(self): ...
    def getsendbuffer(self): ...
    def recv(self, size, flags: int = ..., timeout=...): ...
    def peek(self, size, timeout=...): ...
    def recv_close(self, timeout=..., maxsize=...): ...
    def recv_until(self, delimiter, timeout=..., maxsize=..., with_delimiter: bool = ...): ...
    def recv_size(self, size, timeout=...): ...
    def send(self, data, flags: int = ..., timeout=...): ...
    def sendall(self, data, flags: int = ..., timeout=...): ...
    def flush(self) -> None: ...
    def buffer(self, data) -> None: ...
    def getsockname(self): ...
    def getpeername(self): ...
    def getsockopt(self, level, optname, buflen: Incomplete | None = ...): ...
    def setsockopt(self, level, optname, value): ...
    @property
    def type(self): ...
    @property
    def family(self): ...
    @property
    def proto(self): ...
    def fileno(self): ...
    rbuf_unconsumed: Incomplete
    def close(self) -> None: ...
    def shutdown(self, how) -> None: ...

class Error(socket.error): ...
class ConnectionClosed(Error): ...

class MessageTooLong(Error):
    def __init__(self, bytes_read: Incomplete | None = ..., delimiter: Incomplete | None = ...) -> None: ...

class Timeout(socket.timeout, Error):
    def __init__(self, timeout, extra: str = ...) -> None: ...

class NetstringSocket:
    bsock: Incomplete
    timeout: Incomplete
    maxsize: Incomplete
    def __init__(self, sock, timeout=..., maxsize=...) -> None: ...
    def fileno(self): ...
    def settimeout(self, timeout) -> None: ...
    def setmaxsize(self, maxsize) -> None: ...
    def read_ns(self, timeout=..., maxsize=...): ...
    def write_ns(self, payload) -> None: ...

class NetstringProtocolError(Error): ...

class NetstringInvalidSize(NetstringProtocolError):
    def __init__(self, msg) -> None: ...

class NetstringMessageTooLong(NetstringProtocolError):
    def __init__(self, size, maxsize) -> None: ...
