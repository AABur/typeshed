from _typeshed import Incomplete
from collections.abc import Generator
from html.parser import HTMLParser

unichr = chr

def camel2under(camel_string): ...
def under2camel(under_string): ...
def slugify(text, delim: str = ..., lower: bool = ..., ascii: bool = ...): ...
def split_punct_ws(text): ...
def unit_len(sized_iterable, unit_noun: str = ...): ...
def ordinalize(number, ext_only: bool = ...): ...
def cardinalize(unit_noun, count): ...
def singularize(word): ...
def pluralize(word): ...
def find_hashtags(string): ...
def a10n(string): ...
def strip_ansi(text): ...
def asciify(text, ignore: bool = ...): ...
def is_ascii(text): ...

class DeaccenterDict(dict[Incomplete, Incomplete]):
    def __missing__(self, key): ...
    def __getitem__(self, key): ...

def bytes2human(nbytes, ndigits: int = ...): ...

class HTMLTextExtractor(HTMLParser):
    strict: bool
    convert_charrefs: bool
    result: Incomplete
    def __init__(self) -> None: ...
    def handle_data(self, d) -> None: ...
    def handle_charref(self, number) -> None: ...
    def handle_entityref(self, name) -> None: ...
    def get_text(self): ...

def html2text(html): ...
def gunzip_bytes(bytestring): ...
def gzip_bytes(bytestring, level: int = ...): ...
def iter_splitlines(text) -> Generator[Incomplete, None, None]: ...
def indent(text, margin, newline: str = ..., key=...): ...
def is_uuid(obj, version: int = ...): ...
def escape_shell_args(args, sep: str = ..., style: Incomplete | None = ...): ...
def args2sh(args, sep: str = ...): ...
def args2cmd(args, sep: str = ...): ...
def parse_int_list(range_string, delim: str = ..., range_delim: str = ...): ...
def format_int_list(int_list, delim: str = ..., range_delim: str = ..., delim_space: bool = ...): ...

class MultiReplace:
    group_map: Incomplete
    combined_pattern: Incomplete
    def __init__(self, sub_map, **kwargs) -> None: ...
    def sub(self, text): ...

def multi_replace(text, sub_map, **kwargs): ...
def unwrap_text(text, ending: str = ...): ...

# Names in __all__ with no definition:
#   int_list_complement
#   int_list_to_int_tuples
