from _typeshed import Incomplete

xrange = range

class BarrelList(list[Incomplete]):
    lists: Incomplete
    def __init__(self, iterable: Incomplete | None = ...) -> None: ...
    def insert(self, index, item) -> None: ...
    def append(self, item) -> None: ...
    def extend(self, iterable) -> None: ...
    def pop(self, *a): ...
    def iter_slice(self, start, stop, step: Incomplete | None = ...): ...
    def del_slice(self, start, stop, step: Incomplete | None = ...) -> None: ...
    __delslice__: Incomplete
    @classmethod
    def from_iterable(cls, it): ...
    def __iter__(self): ...
    def __reversed__(self): ...
    def __len__(self): ...
    def __contains__(self, item): ...
    def __getitem__(self, index): ...
    def __delitem__(self, index) -> None: ...
    def __setitem__(self, index, item) -> None: ...
    def __getslice__(self, start, stop): ...
    def __setslice__(self, start, stop, sequence) -> None: ...
    def sort(self) -> None: ...  # type: ignore
    def reverse(self) -> None: ...
    def count(self, item): ...
    def index(self, item): ...

BList = BarrelList

class SplayList(list[Incomplete]):
    def shift(self, item_index, dest_index: int = ...) -> None: ...
    def swap(self, item_index, dest_index) -> None: ...
