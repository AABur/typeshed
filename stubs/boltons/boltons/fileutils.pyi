from _typeshed import Incomplete
from collections.abc import Generator

unicode = str

def mkdir_p(path) -> None: ...

class FilePerms:
    class _FilePermProperty:
        attribute: Incomplete
        offset: Incomplete
        def __init__(self, attribute, offset) -> None: ...
        def __get__(self, fp_obj, type_: Incomplete | None = ...): ...
        def __set__(self, fp_obj, value): ...
    user: Incomplete
    group: Incomplete
    other: Incomplete
    def __init__(self, user: str = ..., group: str = ..., other: str = ...) -> None: ...
    @classmethod
    def from_int(cls, i): ...
    @classmethod
    def from_path(cls, path): ...
    def __int__(self): ...

def atomic_save(dest_path, **kwargs): ...

class AtomicSaver:
    dest_path: Incomplete
    overwrite: Incomplete
    file_perms: Incomplete
    overwrite_part: Incomplete
    part_filename: Incomplete
    rm_part_on_exc: Incomplete
    text_mode: Incomplete
    buffering: Incomplete
    dest_dir: Incomplete
    part_path: Incomplete
    mode: Incomplete
    open_flags: Incomplete
    part_file: Incomplete
    def __init__(self, dest_path, **kwargs) -> None: ...
    def setup(self) -> None: ...
    def __enter__(self): ...
    def __exit__(self, exc_type, exc_val, exc_tb) -> None: ...

def iter_find_files(
    directory, patterns, ignored: Incomplete | None = ..., include_dirs: bool = ...
) -> Generator[Incomplete, None, None]: ...
def copy_tree(src, dst, symlinks: bool = ..., ignore: Incomplete | None = ...): ...

copytree = copy_tree
file = object

class DummyFile(file):
    name: Incomplete
    mode: Incomplete
    closed: bool
    errors: Incomplete
    isatty: bool
    encoding: Incomplete
    newlines: Incomplete
    softspace: int
    def __init__(self, path, mode: str = ..., buffering: Incomplete | None = ...) -> None: ...
    def close(self) -> None: ...
    def fileno(self): ...
    def flush(self) -> None: ...
    def next(self) -> None: ...
    def read(self, size: int = ...): ...
    def readline(self, size: int = ...): ...
    def readlines(self, size: int = ...): ...
    def seek(self) -> None: ...
    def tell(self): ...
    def truncate(self) -> None: ...
    def write(self, string) -> None: ...
    def writelines(self, list_of_strings) -> None: ...
    def __next__(self) -> None: ...
    def __enter__(self) -> None: ...
    def __exit__(self, exc_type, exc_val, exc_tb) -> None: ...
