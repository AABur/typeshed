from _typeshed import Incomplete

text = unicode
text = str

class Callpoint:
    func_name: Incomplete
    lineno: Incomplete
    module_name: Incomplete
    module_path: Incomplete
    lasti: Incomplete
    line: Incomplete
    def __init__(self, module_name, module_path, func_name, lineno, lasti, line: Incomplete | None = ...) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_current(cls, level: int = ...): ...
    @classmethod
    def from_frame(cls, frame): ...
    @classmethod
    def from_tb(cls, tb): ...
    def tb_frame_str(self): ...

class _DeferredLine:
    filename: Incomplete
    lineno: Incomplete
    def __init__(self, filename, lineno, module_globals: Incomplete | None = ...) -> None: ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def __len__(self): ...

class TracebackInfo:
    callpoint_type: Incomplete
    frames: Incomplete
    def __init__(self, frames) -> None: ...
    @classmethod
    def from_frame(cls, frame: Incomplete | None = ..., level: int = ..., limit: Incomplete | None = ...): ...
    @classmethod
    def from_traceback(cls, tb: Incomplete | None = ..., limit: Incomplete | None = ...): ...
    @classmethod
    def from_dict(cls, d): ...
    def to_dict(self): ...
    def __len__(self): ...
    def __iter__(self): ...
    def get_formatted(self): ...

class ExceptionInfo:
    tb_info_type: Incomplete
    exc_type: Incomplete
    exc_msg: Incomplete
    tb_info: Incomplete
    def __init__(self, exc_type, exc_msg, tb_info) -> None: ...
    @classmethod
    def from_exc_info(cls, exc_type, exc_value, traceback): ...
    @classmethod
    def from_current(cls): ...
    def to_dict(self): ...
    def get_formatted(self): ...
    def get_formatted_exception_only(self): ...

class ContextualCallpoint(Callpoint):
    local_reprs: Incomplete
    pre_lines: Incomplete
    post_lines: Incomplete
    def __init__(self, *a, **kw) -> None: ...
    @classmethod
    def from_frame(cls, frame): ...
    @classmethod
    def from_tb(cls, tb): ...
    def to_dict(self): ...

class ContextualTracebackInfo(TracebackInfo):
    callpoint_type: Incomplete

class ContextualExceptionInfo(ExceptionInfo):
    tb_info_type: Incomplete

def print_exception(etype, value, tb, limit: Incomplete | None = ..., file: Incomplete | None = ...) -> None: ...

class ParsedException:
    exc_type: Incomplete
    exc_msg: Incomplete
    frames: Incomplete
    def __init__(self, exc_type_name, exc_msg, frames: Incomplete | None = ...) -> None: ...
    @property
    def source_file(self): ...
    def to_dict(self): ...
    def to_string(self): ...
    @classmethod
    def from_string(cls, tb_str): ...

ParsedTB = ParsedException
