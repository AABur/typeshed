from _typeshed import Incomplete
from collections.abc import Generator

class RLock:
    def __enter__(self) -> None: ...
    def __exit__(self, exctype, excinst, exctb) -> None: ...

xrange = range
unicode: Incomplete
str: Incomplete
bytes: Incomplete
basestring: Incomplete
PREV: Incomplete
NEXT: Incomplete
KEY: Incomplete
VALUE: Incomplete
DEFAULT_MAX_SIZE: int

class LRI(dict):
    hit_count: int
    max_size: Incomplete
    on_miss: Incomplete
    def __init__(self, max_size=..., values: Incomplete | None = ..., on_miss: Incomplete | None = ...) -> None: ...
    def __setitem__(self, key, value) -> None: ...
    def __getitem__(self, key): ...
    def get(self, key, default: Incomplete | None = ...): ...
    def __delitem__(self, key) -> None: ...
    def pop(self, key, default=...): ...
    def popitem(self): ...
    def clear(self) -> None: ...
    def copy(self): ...
    def setdefault(self, key, default: Incomplete | None = ...): ...
    def update(self, E, **F) -> None: ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...

class LRU(LRI):
    def __getitem__(self, key): ...

class _HashedKey(list):
    hash_value: Incomplete
    def __init__(self, key) -> None: ...
    def __hash__(self): ...

def make_cache_key(args, kwargs, typed: bool = ..., kwarg_mark=..., fasttypes=...): ...

class CachedFunction:
    func: Incomplete
    get_cache: Incomplete
    scoped: Incomplete
    typed: Incomplete
    key_func: Incomplete
    def __init__(self, func, cache, scoped: bool = ..., typed: bool = ..., key: Incomplete | None = ...): ...
    def __call__(self, *args, **kwargs): ...

class CachedMethod:
    func: Incomplete
    __isabstractmethod__: Incomplete
    get_cache: Incomplete
    scoped: Incomplete
    typed: Incomplete
    key_func: Incomplete
    bound_to: Incomplete
    def __init__(self, func, cache, scoped: bool = ..., typed: bool = ..., key: Incomplete | None = ...): ...
    def __get__(self, obj, objtype: Incomplete | None = ...): ...
    def __call__(self, *args, **kwargs): ...

def cached(cache, scoped: bool = ..., typed: bool = ..., key: Incomplete | None = ...): ...
def cachedmethod(cache, scoped: bool = ..., typed: bool = ..., key: Incomplete | None = ...): ...

class cachedproperty:
    __doc__: Incomplete
    __isabstractmethod__: Incomplete
    func: Incomplete
    def __init__(self, func) -> None: ...
    def __get__(self, obj, objtype: Incomplete | None = ...): ...

class ThresholdCounter:
    total: int
    def __init__(self, threshold: float = ...) -> None: ...
    @property
    def threshold(self): ...
    def add(self, key) -> None: ...
    def elements(self): ...
    def most_common(self, n: Incomplete | None = ...): ...
    def get_common_count(self): ...
    def get_uncommon_count(self): ...
    def get_commonality(self): ...
    def __getitem__(self, key): ...
    def __len__(self): ...
    def __contains__(self, key): ...
    def iterkeys(self): ...
    def keys(self): ...
    def itervalues(self) -> Generator[Incomplete, None, None]: ...
    def values(self): ...
    def iteritems(self) -> Generator[Incomplete, None, None]: ...
    def items(self): ...
    def get(self, key, default: int = ...): ...
    def update(self, iterable, **kwargs) -> None: ...

class MinIDMap:
    mapping: Incomplete
    ref_map: Incomplete
    free: Incomplete
    def __init__(self) -> None: ...
    def get(self, a): ...
    def drop(self, a) -> None: ...
    def __contains__(self, a): ...
    def __iter__(self): ...
    def __len__(self): ...
    def iteritems(self): ...
