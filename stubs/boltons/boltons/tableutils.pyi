from _typeshed import Incomplete

class UnsupportedData(TypeError): ...

class InputType:
    def __init__(self, *a, **kw) -> None: ...
    def get_entry_seq(self, data_seq, headers): ...

class DictInputType(InputType):
    def check_type(self, obj): ...
    def guess_headers(self, obj): ...
    def get_entry(self, obj, headers): ...
    def get_entry_seq(self, obj, headers): ...

class ObjectInputType(InputType):
    def check_type(self, obj): ...
    def guess_headers(self, obj): ...
    def get_entry(self, obj, headers): ...

class ListInputType(InputType):
    def check_type(self, obj): ...
    def guess_headers(self, obj) -> None: ...
    def get_entry(self, obj, headers): ...
    def get_entry_seq(self, obj_seq, headers): ...

class TupleInputType(InputType):
    def check_type(self, obj): ...
    def guess_headers(self, obj) -> None: ...
    def get_entry(self, obj, headers): ...
    def get_entry_seq(self, obj_seq, headers): ...

class NamedTupleInputType(InputType):
    def check_type(self, obj): ...
    def guess_headers(self, obj): ...
    def get_entry(self, obj, headers): ...
    def get_entry_seq(self, obj_seq, headers): ...

class Table:
    headers: Incomplete
    metadata: Incomplete
    def __init__(self, data: Incomplete | None = ..., headers=..., metadata: Incomplete | None = ...) -> None: ...
    def extend(self, data) -> None: ...
    @classmethod
    def from_dict(cls, data, headers=..., max_depth: int = ..., metadata: Incomplete | None = ...): ...
    @classmethod
    def from_list(cls, data, headers=..., max_depth: int = ..., metadata: Incomplete | None = ...): ...
    @classmethod
    def from_object(cls, data, headers=..., max_depth: int = ..., metadata: Incomplete | None = ...): ...
    @classmethod
    def from_data(cls, data, headers=..., max_depth: int = ..., **kwargs): ...
    def __len__(self): ...
    def __getitem__(self, idx): ...
    def to_html(
        self,
        orientation: Incomplete | None = ...,
        wrapped: bool = ...,
        with_headers: bool = ...,
        with_newlines: bool = ...,
        with_metadata: bool = ...,
        max_depth: int = ...,
    ): ...
    def get_cell_html(self, value): ...
    def to_text(self, with_headers: bool = ..., maxlen: Incomplete | None = ...): ...
