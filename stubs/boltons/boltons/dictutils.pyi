def __getattr__(self, name: str) -> Any: ...  # incomplete

from collections.abc import Generator, Iterable, Hashable, ItemsView, KeysView, ValuesView
from typing import Any, Final, NoReturn

class OrderedMultiDict(dict):
    def add(self, k: Hashable, v: object) -> NoReturn: ...
    def addlist(self, k: Hashable, v: Iterable[object]) -> NoReturn: ...
    def clear(self) -> NoReturn: ...
    def copy(self) -> OrderedMultiDict: ...
    def counts(self) -> OrderedMultiDict: ...
    @classmethod
    def fromkeys(cls, keys: Hashable, default: object | None = ...) -> OrderedMultiDict: ...
    def get(self, k: Hashable, default: object | None = ...) -> OrderedMultiDict: ...
    def getlist(self, k: Hashable, default: object | None = ...) -> list[object]: ...
    def inverted(self) -> OrderedMultiDict: ...
    def items(self, multi: bool = ...) -> list[tuple[Hashable, object]]: ...
    def iteritems(self, multi: bool = ...) -> Generator[tuple[Hashable, object], None, None]: ...
    def iterkeys(self, multi: bool = ...) -> Generator[Hashable, None, None]: ...
    def itervalues(self, multi: bool = ...) -> Generator[object, None, None]: ...
    def keys(self, multi: bool = ...) -> list[Hashable]: ...
    def pop(self, k: Hashable, default: object | None = ...) -> object: ...
    def popall(self, k: Hashable, default: object | None = ...) -> list[object]: ...
    def poplast(self, k: Hashable | None = ..., default: object | None = ...) -> object: ...
    def setdefault(self, k: Hashable, default: object | None = ...) -> object: ...
    def sorted(self, key: Hashable | None = ..., reverse: bool = ...) -> OrderedMultiDict: ...
    def sortedvalues(self, key: Hashable | None = ..., reverse: bool = ...) -> OrderedMultiDict: ...
    def todict(self, multi: bool = ...) -> dict[Hashable, object]: ...
    def update(self, E: dict[Hashable, object] | Iterable[object], **F: object) -> NoReturn: ...
    def update_extend(self, E: dict[Hashable, object] | Iterable[object], **F: object) -> NoReturn: ...
    def values(self, multi: bool = ...) -> list[object]: ...
    def viewitems(self) -> ItemsView[Hashable, object]: ...
    def viewkeys(self) -> KeysView[Hashable]: ...
    def viewvalues(self) -> ValuesView[object]: ...

OMD: Final[OrderedMultiDict]
MultiDict: Final[OrderedMultiDict]

class FastIterOrderedMultiDict(OrderedMultiDict):   # undocumented
    def iteritems(self, multi: bool = ...) -> Generator[tuple[Hashable, object], None, None] -> NoReturn: ...
    def iterkeys(self, multi: bool = ...) -> Generator[Hashable, None, None]: ...

class OneToOne(dict):
    def clear(self) -> None: ...
    def copy(self) -> OneToOne: ...
    def pop(self, key: Hashable, default: object = ...) -> object: ...
    def popitem(self) -> tuple[Hashable, object]: ...
    def setdefault(self, key: Hashable, default: object | None = ...) -> object: ...
    @classmethod
    def unique(cls, *a, **kw) -> NoReturn: ...
    def update(self, dict_or_iterable: dict[Hashable, object] | Iterable[object] , **kw: Any) -> NoReturn: ...

class ManyToMany:
    def __getattr__(self, name: str) -> Any: ...  # incomplete
    data: dict[Hashable, object]
    inv: tuple[object]
    def add(self, key: Hashable, val: object) -> NoReturn: ...
    def get(self, key: Hashable, default: frozenset[object] = ...) -> Any: ...
    def iteritems(self) -> Generator[tuple[Hashable, object], None, None]: ...
    def keys(self): ...  # incomplete
    def remove(self, key: Hashable, val: object) -> NoReturn: ...
    def replace(self, key: Hashable, newkey: Hashable) -> NoReturn: ...
    def update(self, iterable: Iterable[object] ) -> NoReturn: ...

def subdict(d: dict[Hashable, object], keep: Iterable[object] | None = ..., drop: Iterable[object] | None = ...) -> dict[Hashable, object]: ...

class FrozenHashError(TypeError): ...  # undocumented

class FrozenDict(dict):
    def clear(self, *a, **kw) -> NoReturn: ...
    @classmethod
    def fromkeys(cls, keys: Iterable[object], value: object | None = ...) -> FrozenDict: ...
    def pop(self, *a, **kw) -> NoReturn: ...
    def popitem(self, *a, **kw) -> NoReturn: ...
    def setdefault(self, *a, **kw) -> NoReturn: ...
    def updated(self, *a, **kw) -> FrozenDict: ...
