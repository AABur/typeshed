from _typeshed import Incomplete

def clamp(x, lower=..., upper=...): ...
def ceil(x, options: Incomplete | None = ...): ...
def floor(x, options: Incomplete | None = ...): ...

bytes = str
unicode = str

class Bits:
    val: Incomplete
    len: Incomplete
    def __init__(self, val: int = ..., len_: Incomplete | None = ...) -> None: ...
    def __getitem__(self, k): ...
    def __len__(self): ...
    def __eq__(self, other): ...
    def __or__(self, other): ...
    def __and__(self, other): ...
    def __lshift__(self, other): ...
    def __rshift__(self, other): ...
    def __hash__(self): ...
    def as_list(self): ...
    def as_bin(self): ...
    def as_hex(self): ...
    def as_int(self): ...
    def as_bytes(self): ...
    @classmethod
    def from_list(cls, list_): ...
    @classmethod
    def from_bin(cls, bin): ...
    @classmethod
    def from_hex(cls, hex): ...
    @classmethod
    def from_int(cls, int_, len_: Incomplete | None = ...): ...
    @classmethod
    def from_bytes(cls, bytes_): ...
